[{"C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\index.js":"1","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\reportWebVitals.js":"2","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\App.js":"3","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\KNN.jsx":"4","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\Logistic_resgression.jsx":"5","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\KMeans.jsx":"6","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\RandomForest.jsx":"7","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\Decision_tree.jsx":"8","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\Naive_bayes.jsx":"9","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\Svm.jsx":"10","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\Input.jsx":"11","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\main_area.jsx":"12","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\new_comp.jsx":"13","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\Linear_regression.jsx":"14","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\preprocess.jsx":"15","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\Output.jsx":"16","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\CodeGeneration.jsx":"17","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\radiobutton.jsx":"18","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\codeGeneration\\CGLinearRegression.jsx":"19","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\codeGeneration\\CGSVM.jsx":"20","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\Login.js":"21"},{"size":552,"mtime":1683569018293,"results":"22","hashOfConfig":"23"},{"size":375,"mtime":1683569018294,"results":"24","hashOfConfig":"23"},{"size":432,"mtime":1685256291738,"results":"25","hashOfConfig":"23"},{"size":1705,"mtime":1685253591242,"results":"26","hashOfConfig":"23"},{"size":1661,"mtime":1685253591244,"results":"27","hashOfConfig":"23"},{"size":1563,"mtime":1685253591241,"results":"28","hashOfConfig":"23"},{"size":1794,"mtime":1685253591247,"results":"29","hashOfConfig":"23"},{"size":1317,"mtime":1685253591240,"results":"30","hashOfConfig":"23"},{"size":921,"mtime":1685253591245,"results":"31","hashOfConfig":"23"},{"size":1866,"mtime":1685253591248,"results":"32","hashOfConfig":"23"},{"size":2045,"mtime":1685253591240,"results":"33","hashOfConfig":"23"},{"size":211,"mtime":1685253591251,"results":"34","hashOfConfig":"23"},{"size":15805,"mtime":1685253591252,"results":"35","hashOfConfig":"23"},{"size":301,"mtime":1685253591243,"results":"36","hashOfConfig":"23"},{"size":773,"mtime":1685253591253,"results":"37","hashOfConfig":"23"},{"size":603,"mtime":1685253591246,"results":"38","hashOfConfig":"23"},{"size":1757,"mtime":1685253591239,"results":"39","hashOfConfig":"23"},{"size":577,"mtime":1685253591254,"results":"40","hashOfConfig":"23"},{"size":186,"mtime":1685253591249,"results":"41","hashOfConfig":"23"},{"size":465,"mtime":1685253591250,"results":"42","hashOfConfig":"23"},{"size":1730,"mtime":1685262618766,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"1sqnquw",{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"47"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"47"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"47"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"47"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"47"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\index.js",[],[],[],"C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\reportWebVitals.js",[],[],"C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\App.js",["113"],[],"import './App.css';\r\nimport { BrowserRouter as Router ,Routes, Route} from 'react-router-dom'\r\nimport Main_area from './components/main_area.jsx';\r\nimport Login from './components/Login.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path='/' element={<Login/>}/>\r\n      </Routes>\r\n    </Router>\r\n    // <div className=\"App\">\r\n    //   <Main_area />\r\n    // </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\KNN.jsx",[],[],"C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\Logistic_resgression.jsx",["114"],[],"import React from 'react'\r\nconst Logistic_resgression = ({setKey,changeLogisticPenalty,changeLogisticClassWeight,changeLogisticRandomState,changeLogisticMaxIter}) => {\r\n    function changePenalty(key,value)\r\n        {\r\n            changeLogisticPenalty(key,value)\r\n        }\r\n  return (\r\n    <div className='flex flex-col w-96 border-2 background-color1 gap-1' key={setKey}>\r\n        <div className='background-color-blue p-2'>\r\n        Logistic Regression\r\n        </div>\r\n        \r\n        <div className='flex flex-col w-80 place-self-center p-2 rounded-lg gap-1 interior'>\r\n            <p className='self-start'>Penalty</p>\r\n            <select name=\"penalty\" id=\"penalty\" className='border-1 h-10' onChange={e=>changeLogisticPenalty(setKey,e.target.value)}>\r\n                <option value=\"L2\">L2</option>\r\n                <option value=\"none\">none</option>\r\n            </select>\r\n            <p className='self-start'>Class Weight</p>\r\n            <select name=\"class weight\" id=\"class weight\" className='border-1 h-10' onChange={e=>changeLogisticClassWeight(setKey,e.target.value)}>\r\n                <option value=\"L2\">balanced</option>\r\n                <option value=\"none\">none</option>\r\n            </select>\r\n            <p className='self-start'>Random State</p>\r\n            <input type='number' className='rounded-lg' onChange={e=>changeLogisticRandomState(setKey,e.target.value)}></input>\r\n            <p className='self-start'>Max Iteration</p>\r\n            <input type='number' className='rounded-lg' onChange={e=>changeLogisticMaxIter(setKey,e.target.value)}></input>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Logistic_resgression","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\KMeans.jsx",[],[],"C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\RandomForest.jsx",[],[],"C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\Decision_tree.jsx",[],[],"C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\Naive_bayes.jsx",[],[],"C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\Svm.jsx",[],[],"C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\Input.jsx",[],[],"C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\main_area.jsx",[],[],"C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\new_comp.jsx",["115","116","117","118","119","120"],[],"import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport Linear_regression from './Linear_regression.jsx'\r\nimport Logistic_resgression from './Logistic_resgression.jsx'\r\nimport KNN from './KNN.jsx'\r\nimport KMeans from './KMeans.jsx'\r\nimport RandomForest from './RandomForest.jsx'\r\nimport Decision_tree from './Decision_tree.jsx'\r\nimport Svm from './Svm.jsx'\r\nimport Naive_bayes from './Naive_bayes.jsx'\r\nimport Preprocess from './preprocess.jsx'\r\nimport Input from './Input.jsx'\r\nimport CodeGeneration from './CodeGeneration.jsx'\r\nimport Output from './Output.jsx'\r\nimport './style.css' \r\n\r\nconst NewComp = () => {\r\n  const [layers,setLayers]=useState([{key:crypto.randomUUID(),type:'input',filename:'',inbuilt:'',testsize:'',randomstate:''},{key:crypto.randomUUID(),type:'preprocess',scaler:'StandardScaler'}])\r\n  const [output,setOutput]=useState(true)\r\n  console.log(layers)  \r\n  \r\n  function addOutput()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'output',fileName:'output.pkl'}]})\r\n  }\r\n  function addLinearRegression()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'linear_regression'}]})\r\n    setOutput(false)\r\n    addOutput()\r\n  }\r\n  function addLogisticRegression()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'logistic_regression',class_weight:'Balanced',penalty:'l2',random_state:'none',max_iter:'default'}]})\r\n    setOutput(false)\r\n    addOutput()\r\n  }\r\n  function addKNN()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'knn',choice:'Classifier',number_neighbours:'5',algorithm:'auto',weights:'uniform'}]})\r\n    setOutput(false)\r\n    addOutput()\r\n  }\r\n  function addKMeans()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'kmeans',n_clusters:'8',init:'k-means++',n_init:'10',max_iter:'300',random_state:'0'}]})\r\n    setOutput(false)\r\n    addOutput()\r\n  }\r\n  function addRandomForest()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'randomforest',choice:'Classifier',n_estimators:'100',criterion:'gini',min_sample_split:'2',max_features:'10'}]})\r\n    setOutput(false)\r\n    addOutput()\r\n  }\r\n  function addDecisionTree()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'decision_tree',splitter:'best',min_samples_split:'2',random_state:''}]})\r\n    setOutput(false)\r\n    addOutput()\r\n  }\r\n  function addSvm()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'svm',c:'1.0',kernel:'rbf',degree:'3',gamma:'scale',random_state:''}]})\r\n    setOutput(false)\r\n    addOutput()\r\n  }\r\n  function addNaiveBayes()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'naive_bayes',estimator:''}]})\r\n    setOutput(false)\r\n    addOutput()\r\n  }\r\n  function changeDecisionSplitter(key,splitter)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,splitter}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeDecisionMinSamplesSplit(key,min_samples_split)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,min_samples_split}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeDecisionRandomState(key,random_state)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,random_state}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeSvmC(key,C)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,C}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  } \r\n  function changeSvmKernel(key,kernel)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,kernel}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeSvmDegree(key,degree)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,degree}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeSvmGamma(key,gamma)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,gamma}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeSvmRandomState(key,random_state)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,random_state}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeNaiveBayesEstimator(key,estimator)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,estimator}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  \r\n \r\n  function changeLogisticPenalty(key,penalty)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n        console.log(key+'   '+layer.key)\r\n          console.log(penalty)\r\n          return {...layer,penalty}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeLogisticClassWeight(key,class_weight)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,class_weight}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeLogisticRandomState(key,random_state)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,random_state}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeLogisticMaxIter(key,max_iter)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,max_iter}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKNNChoice(key,choice)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,choice}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKNNNumber(key,number_neighbours)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,number_neighbours}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  \r\n  function changeKNNAlgorithm(key,algorithm)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,algorithm}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKNNWeights(key,weights)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,weights}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKMeansClusterNo(key,n_clusters)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,n_clusters}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKMeansInit(key,init)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,init}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKMeansInitNo(key,n_init)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,n_init}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKMeansRandom(key,random_state)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,random_state}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKMeansMaxIter(key,max_iter)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,max_iter}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n\r\n  function changeRandomChoice(key,choice)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,choice}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeRandomEstimators(key,n_estimators)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,n_estimators}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeRandomCriterion(key,criterion)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,criterion}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeRandomMinSample(key,min_sample_split)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,min_sample_split}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeRandomMaxFeatures(key,max_features)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,max_features}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeOutputFileName(key,fileName)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,fileName}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changePreprocess(key,scaler)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,scaler}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeInputFileName(key,file_name)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,file_name}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeInputInbuilt(key,inbuilt)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,inbuilt}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeInputTestSize(key,testsize)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,testsize}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeInputRandomState(key,inputrandomstate)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,inputrandomstate}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  \r\n  return (\r\n    <div className='flex flex-col'>\r\n      <div className='m-12 flex flex-row-reverse place-content-start gap-2'>\r\n        {\r\n          output?\r\n            (<div className='w-96 py-2 border-dashed border-2 gap-1 text-4xl rounded-lg background-color1'>\r\n              <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addLinearRegression()}>Linear Regression</button>\r\n              <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addLogisticRegression()}>Logistic Regression</button>\r\n              <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addKNN()}>KNN</button>\r\n              <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addKMeans()}>K-means</button>\r\n              <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addRandomForest()}>Random Forest</button>\r\n              <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addDecisionTree()}>Decision Tree</button>\r\n              <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addSvm()}>SVM</button>\r\n              <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addNaiveBayes()}>Naive Bayes</button>\r\n            </div>):(<div></div>)\r\n            \r\n          }\r\n          <ul className='flex flex-row text-4xl gap-2 p-1'>\r\n            {\r\n              layers.map(layer=>\r\n              {\r\n                if(layer.type==='input')\r\n              {\r\n                return <Input setKey={layer.key} changeInputFileName={changeInputFileName} changeInputInbuilt={changeInputInbuilt} changeInputTestSize={changeInputTestSize} changeInputRandomState={changeInputRandomState}/>\r\n              }\r\n                if(layer.type==='preprocess')\r\n                {\r\n                  return <Preprocess setKey={layer.key} changePreprocess={changePreprocess}/>\r\n                }\r\n                if(layer.type==='linear_regression')\r\n              {\r\n                return <Linear_regression setKey={layer.key} />\r\n              }\r\n              if(layer.type==='logistic_regression')\r\n              {\r\n                return <Logistic_resgression setKey={layer.key} changeLogisticPenalty={changeLogisticPenalty} changeLogisticClassWeight={changeLogisticClassWeight} changeLogisticRandomState={changeLogisticRandomState} changeLogisticMaxIter={changeLogisticMaxIter}/>\r\n              }\r\n              if(layer.type==='knn')\r\n              {\r\n                return <KNN setKey={layer.key} changeKNNChoice={changeKNNChoice} changeKNNAlgorithm={changeKNNAlgorithm} changeKNNNumber={changeKNNNumber} changeKNNWeights={changeKNNWeights} />\r\n              }\r\n              if(layer.type==='kmeans')\r\n              {\r\n                return <KMeans setKey={layer.key} changeKMeansClusterNo={changeKMeansClusterNo} changeKMeansInit={changeKMeansInit} changeKMeansInitNo={changeKMeansInitNo} changeKMeansMaxIter={changeKMeansMaxIter} changeKMeansRandom={changeKMeansRandom} />\r\n              }\r\n              if(layer.type==='randomforest')\r\n              {\r\n                return <RandomForest setKey={layer.key} changeRandomChoice={changeRandomChoice} changeRandomCriterion={changeRandomCriterion} changeRandomEstimators={changeRandomEstimators} changeRandomMaxFeatures={changeRandomMaxFeatures} changeRandomMinSample={changeRandomMinSample} />\r\n              }\r\n              if(layer.type==='decision_tree')\r\n              {\r\n                return <Decision_tree setKey={layer.key} changeDecisionSplitter={changeDecisionSplitter} changeDecisionMinSamplesSplit={changeDecisionMinSamplesSplit} changeDecisionRandomState={changeDecisionRandomState}/>\r\n              }\r\n              if(layer.type==='svm')\r\n              {\r\n                return <Svm setKey={layer.key} changeSvmC={changeSvmC} changeSvmKernel={changeSvmKernel} changeSvmDegree={changeSvmDegree} changeSvmGamma={changeSvmGamma} changeSvmRandomState={changeSvmRandomState}/>\r\n              }\r\n              if(layer.type==='naive_bayes')\r\n              {\r\n                return <Naive_bayes setKey={layer.key} changeNaiveBayesEstimator={changeNaiveBayesEstimator} />\r\n              }\r\n              if(layer.type==='output')\r\n                {\r\n\r\n                  return <Output setKey={layer.key} changeOutputFileName={changeOutputFileName}/>\r\n                }\r\n            })}\r\n          </ul>\r\n      </div>\r\n      \r\n      <CodeGeneration data={layers}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NewComp","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\Linear_regression.jsx",[],[],"C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\preprocess.jsx",[],[],"C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\Output.jsx",[],[],"C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\CodeGeneration.jsx",["121","122"],[],"import React from 'react'\r\nimport linearRegression from './codeGeneration/CGLinearRegression'\r\nimport SVM from './codeGeneration/CGSVM'\r\n//give import statements of all functions\r\n\r\nfunction createCode(data){\r\n  var imports\r\n  var code\r\n  data.map(layer=>\r\n    { \r\n        /*if(layer.type==='input')\r\n        {\r\n          input(layer)\r\n        }\r\n        else if(layer.type==='preprocess')\r\n        {\r\n          preprocess(layer)\r\n        }\r\n        else*/ if(layer.type==='linear_regression')\r\n        {  \r\n          var temp=linearRegression(layer)\r\n          imports=temp.import\r\n          code=temp.code\r\n        }\r\n        /*else if(layer.type==='logistic_regression')\r\n        {\r\n          logisticRegression(layer)\r\n        }\r\n        else if(layer.type==='knn')\r\n        {\r\n          knn(layer)\r\n        }\r\n        else if(layer.type==='kmeans')\r\n        {\r\n          kMeans(layer)\r\n        }\r\n        else if(layer.type==='randomforest')\r\n        {\r\n          randomForest(layer)\r\n        }\r\n        else if(layer.type==='decision_tree')\r\n        {\r\n          decisionTree(layer)\r\n        }\r\n        else*/ if(layer.type==='svm')\r\n        {\r\n          var temp=SVM(layer)\r\n          imports=temp.import\r\n          code=temp.code\r\n          console.log(imports)\r\n          console.log(code)\r\n        }/*\r\n        else if(layer.type==='naive_bayes')\r\n        {\r\n          naiveBayes(layer)\r\n        }\r\n        else if(layer.type==='output')\r\n          {\r\n            output(layer)\r\n          }*/\r\n    })\r\n  \r\n}\r\nconst CodeGeneration = ({data}) => {\r\n  return (\r\n    <div>\r\n        <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>createCode(data)}>Generate Code</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CodeGeneration","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\radiobutton.jsx",[],[],"C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\codeGeneration\\CGLinearRegression.jsx",[],[],"C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\codeGeneration\\CGSVM.jsx",["123"],[],"function SVM(layer) {\r\n    if(layer.random_state!='')\r\n    {\r\n    return {import:[\"from sklearn import svm\"],code:[\"model=svm.SVC(kernel='\"+layer.kernel+\"',C=\"+layer.c+\",degree=\"+layer.degree+\",gamma='\"+layer.gamma+\"',random_state=\"+layer.random_state+\" )\"]}\r\n    }\r\n    else\r\n    return {import:[\"from sklearn import svm\"],code:[\"model=svm.SVC(kernel='\"+layer.kernel+\"',C=\"+layer.c+\",degree=\"+layer.degree+\",gamma='\"+layer.gamma+\"' )\"]}\r\n\r\n}\r\n\r\nexport default SVM;","C:\\Users\\Merene Benson\\Downloads\\nocode\\NoCodeML\\src\\components\\Login.js",[],[],{"ruleId":"124","severity":1,"message":"125","line":3,"column":8,"nodeType":"126","messageId":"127","endLine":3,"endColumn":17},{"ruleId":"124","severity":1,"message":"128","line":3,"column":14,"nodeType":"126","messageId":"127","endLine":3,"endColumn":27},{"ruleId":"124","severity":1,"message":"129","line":2,"column":20,"nodeType":"126","messageId":"127","endLine":2,"endColumn":29},{"ruleId":"130","severity":1,"message":"131","line":487,"column":31,"nodeType":"132","messageId":"133","endLine":487,"endColumn":33},{"ruleId":"134","severity":1,"message":"135","line":499,"column":24,"nodeType":"136","messageId":"137","endLine":499,"endColumn":64},{"ruleId":"134","severity":1,"message":"138","line":503,"column":24,"nodeType":"136","messageId":"137","endLine":503,"endColumn":266},{"ruleId":"134","severity":1,"message":"139","line":519,"column":24,"nodeType":"136","messageId":"137","endLine":519,"endColumn":223},{"ruleId":"134","severity":1,"message":"140","line":527,"column":24,"nodeType":"136","messageId":"137","endLine":527,"endColumn":112},{"ruleId":"130","severity":1,"message":"141","line":9,"column":17,"nodeType":"132","messageId":"142","endLine":9,"endColumn":19},{"ruleId":"143","severity":1,"message":"144","line":47,"column":15,"nodeType":"126","messageId":"145","endLine":47,"endColumn":19},{"ruleId":"146","severity":1,"message":"147","line":2,"column":26,"nodeType":"148","messageId":"149","endLine":2,"endColumn":28},"no-unused-vars","'Main_area' is defined but never used.","Identifier","unusedVar","'changePenalty' is defined but never used.","'useEffect' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react/jsx-pascal-case","Imported JSX component Linear_regression must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","Imported JSX component Logistic_resgression must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Decision_tree must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Naive_bayes must be in PascalCase or SCREAMING_SNAKE_CASE","Array.prototype.map() expects a return value from arrow function.","expectedInside","no-redeclare","'temp' is already defined.","redeclared","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected"]