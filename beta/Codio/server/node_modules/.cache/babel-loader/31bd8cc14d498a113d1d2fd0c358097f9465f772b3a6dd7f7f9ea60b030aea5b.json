{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Merene Benson\\\\Downloads\\\\nocode\\\\NoCodeML\\\\src\\\\components\\\\new_comp.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport Linear_regression from './Linear_regression.js';\nimport Logistic_resgression from './Logistic_resgression.jsx';\nimport KNN from './KNN.jsx';\nimport KMeans from './KMeans.jsx';\nimport RandomForest from './RandomForest.jsx';\nimport Decision_tree from './Decision_tree.jsx';\nimport Svm from './Svm.jsx';\nimport Naive_bayes from './Naive_bayes.jsx';\nimport './style.css';\nimport Input from './Input.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewComp = () => {\n  _s();\n  const [layers, setLayers] = useState([{\n    key: crypto.randomUUID(),\n    type: 'input',\n    filename: '',\n    inbuilt: '',\n    testsize: '',\n    randomstate: ''\n  }]); ///////\n  console.log(layers);\n  function addLinearRegression() {\n    setLayers(currentLayers => {\n      return [...currentLayers, {\n        key: crypto.randomUUID(),\n        type: 'linear_regression'\n      }];\n    });\n  }\n  function addLogisticRegression() {\n    setLayers(currentLayers => {\n      return [...currentLayers, {\n        key: crypto.randomUUID(),\n        type: 'logistic_regression',\n        class_weight: 'Balanced',\n        penalty: 'l2',\n        random_state: 'none',\n        max_iter: 'default'\n      }];\n    });\n  }\n  function addKNN() {\n    setLayers(currentLayers => {\n      return [...currentLayers, {\n        key: crypto.randomUUID(),\n        type: 'knn',\n        choice: 'Classifier',\n        number_neighbours: '5',\n        algorithm: 'auto',\n        weights: 'uniform'\n      }];\n    });\n  }\n  function addKMeans() {\n    setLayers(currentLayers => {\n      return [...currentLayers, {\n        key: crypto.randomUUID(),\n        type: 'kmeans',\n        n_clusters: '8',\n        init: 'k-means++',\n        n_init: '10',\n        max_iter: '300',\n        random_state: '0'\n      }];\n    });\n  }\n  function addRandomForest() {\n    setLayers(currentLayers => {\n      return [...currentLayers, {\n        key: crypto.randomUUID(),\n        type: 'randomforest',\n        choice: 'Classifier',\n        n_estimators: '100',\n        criterion: 'gini',\n        min_sample_split: '2',\n        max_features: '10'\n      }];\n    });\n  }\n  function addDecisionTree() {\n    setLayers(currentLayers => {\n      return [...currentLayers, {\n        key: crypto.randomUUID(),\n        type: 'decision_tree',\n        splitter: 'best',\n        min_samples_split: '2',\n        random_state: ''\n      }];\n    });\n  }\n  function addSvm() {\n    setLayers(currentLayers => {\n      return [...currentLayers, {\n        key: crypto.randomUUID(),\n        type: 'svm',\n        c: '1.0',\n        kernel: 'rbf',\n        degree: '3',\n        gamma: 'scale',\n        random_state: ''\n      }];\n    });\n  }\n  function addNaiveBayes() {\n    setLayers(currentLayers => {\n      return [...currentLayers, {\n        key: crypto.randomUUID(),\n        type: 'naive_bayes',\n        estimator: ''\n      }];\n    });\n  }\n  function changeDecisionSplitter(key, splitter) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            splitter\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeDecisionMinSamplesSplit(key, min_samples_split) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            min_samples_split\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeDecisionRandomState(key, random_state) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            random_state\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeSvmC(key, C) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            C\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeSvmKernel(key, kernel) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            kernel\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeSvmDegree(key, degree) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            degree\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeSvmGamma(key, gamma) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            gamma\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeSvmRandomState(key, random_state) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            random_state\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeNaiveBayesEstimator(key, estimator) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            estimator\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeLogisticPenalty(key, penalty) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          console.log(key + '   ' + layer.key);\n          console.log(penalty);\n          return {\n            ...layer,\n            penalty\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeLogisticClassWeight(key, class_weight) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            class_weight\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeLogisticRandomState(key, random_state) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            random_state\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeLogisticMaxIter(key, max_iter) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            max_iter\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeKNNChoice(key, choice) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            choice\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeKNNNumber(key, number_neighbours) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            number_neighbours\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeKNNAlgorithm(key, algorithm) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            algorithm\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeKNNWeights(key, weights) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            weights\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeKMeansClusterNo(key, n_clusters) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            n_clusters\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeKMeansInit(key, init) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            init\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeKMeansInitNo(key, n_init) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            n_init\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeKMeansRandom(key, random_state) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            random_state\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeKMeansMaxIter(key, max_iter) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            max_iter\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeRandomChoice(key, choice) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            choice\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeRandomEstimators(key, n_estimators) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            n_estimators\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeRandomCriterion(key, criterion) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            criterion\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeRandomMinSample(key, min_sample_split) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            min_sample_split\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeRandomMaxFeatures(key, max_features) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            max_features\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeInputFileName(key, file_name) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            file_name\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeInputInbuilt(key, inbuilt) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            inbuilt\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeInputTestSize(key, testsize) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            testsize\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeInputRandomState(key, inputrandomstate) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            inputrandomstate\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function inputValueChange(key, valuec) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            valuec\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"m-12 flex flex-row-reverse gap-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-96 py-2 border-dashed border-2 gap-1 text-4xl rounded-lg background-color1\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"w-80  m-1 background-color-blue rounded-lg\",\n        onClick: () => addLinearRegression(),\n        children: \"LinearRegression\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"w-80  m-1 background-color-blue rounded-lg\",\n        onClick: () => addLogisticRegression(),\n        children: \"LogisticRegression\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"w-80  m-1 background-color-blue rounded-lg\",\n        onClick: () => addKNN(),\n        children: \"KNN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"w-80  m-1 background-color-blue rounded-lg\",\n        onClick: () => addKMeans(),\n        children: \"K-means\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"w-80  m-1 background-color-blue rounded-lg\",\n        onClick: () => addRandomForest(),\n        children: \"Random Forest\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"w-80  m-1 background-color-blue rounded-lg\",\n        onClick: () => addDecisionTree(),\n        children: \"Decision Tree\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"w-80  m-1 background-color-blue rounded-lg\",\n        onClick: () => addSvm(),\n        children: \"SVM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"w-80  m-1 background-color-blue rounded-lg\",\n        onClick: () => addNaiveBayes(),\n        children: \"Naive Bayes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"flex flex-row text-4xl gap-2 p-1\",\n      children: layers.map(layer => {\n        if (layer.type === 'linear_regression') {\n          return /*#__PURE__*/_jsxDEV(Linear_regression, {\n            setKey: layer.key\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 22\n          }, this);\n        }\n        if (layer.type === 'logistic_regression') {\n          return /*#__PURE__*/_jsxDEV(Logistic_resgression, {\n            setKey: layer.key,\n            changeLogisticPenalty: changeLogisticPenalty,\n            changeLogisticClassWeight: changeLogisticClassWeight,\n            changeLogisticRandomState: changeLogisticRandomState,\n            changeLogisticMaxIter: changeLogisticMaxIter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 22\n          }, this);\n        }\n        if (layer.type === 'knn') {\n          return /*#__PURE__*/_jsxDEV(KNN, {\n            setKey: layer.key,\n            changeKNNChoice: changeKNNChoice,\n            changeKNNAlgorithm: changeKNNAlgorithm,\n            changeKNNNumber: changeKNNNumber,\n            changeKNNWeights: changeKNNWeights\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 22\n          }, this);\n        }\n        if (layer.type === 'kmeans') {\n          return /*#__PURE__*/_jsxDEV(KMeans, {\n            setKey: layer.key,\n            changeKMeansClusterNo: changeKMeansClusterNo,\n            changeKMeansInit: changeKMeansInit,\n            changeKMeansInitNo: changeKMeansInitNo,\n            changeKMeansMaxIter: changeKMeansMaxIter,\n            changeKMeansRandom: changeKMeansRandom\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 22\n          }, this);\n        }\n        if (layer.type === 'randomforest') {\n          return /*#__PURE__*/_jsxDEV(RandomForest, {\n            setKey: layer.key,\n            changeRandomChoice: changeRandomChoice,\n            changeRandomCriterion: changeRandomCriterion,\n            changeRandomEstimators: changeRandomEstimators,\n            changeRandomMaxFeatures: changeRandomMaxFeatures,\n            changeRandomMinSample: changeRandomMinSample\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 22\n          }, this);\n        }\n        if (layer.type === 'decision_tree') {\n          return /*#__PURE__*/_jsxDEV(Decision_tree, {\n            setKey: layer.key,\n            changeDecisionSplitter: changeDecisionSplitter,\n            changeDecisionMinSamplesSplit: changeDecisionMinSamplesSplit,\n            changeDecisionRandomState: changeDecisionRandomState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 22\n          }, this);\n        }\n        if (layer.type === 'svm') {\n          return /*#__PURE__*/_jsxDEV(Svm, {\n            setKey: layer.key,\n            changeSvmC: changeSvmC,\n            changeSvmKernel: changeSvmKernel,\n            changeSvmDegree: changeSvmDegree,\n            changeSvmGamma: changeSvmGamma,\n            changeSvmRandomState: changeSvmRandomState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 22\n          }, this);\n        }\n        if (layer.type === 'naive_bayes') {\n          return /*#__PURE__*/_jsxDEV(Naive_bayes, {\n            setKey: layer.key,\n            changeNaiveBayesEstimator: changeNaiveBayesEstimator\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 22\n          }, this);\n        }\n        if (layer.type === 'input') {\n          return /*#__PURE__*/_jsxDEV(Input, {\n            setKey: layer.key,\n            changeInputFileName: changeInputFileName,\n            changeInputInbuilt: changeInputInbuilt,\n            changeInputTestSize: changeInputTestSize,\n            changeInputRandomState: changeInputRandomState,\n            inputValueChange: inputValueChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 22\n          }, this);\n        }\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 437,\n    columnNumber: 5\n  }, this);\n};\n_s(NewComp, \"n7bURfuA3oWeRirc0hHpFVA8Q40=\");\n_c = NewComp;\nexport default NewComp;\nvar _c;\n$RefreshReg$(_c, \"NewComp\");","map":{"version":3,"names":["React","useState","Linear_regression","Logistic_resgression","KNN","KMeans","RandomForest","Decision_tree","Svm","Naive_bayes","Input","jsxDEV","_jsxDEV","NewComp","_s","layers","setLayers","key","crypto","randomUUID","type","filename","inbuilt","testsize","randomstate","console","log","addLinearRegression","currentLayers","addLogisticRegression","class_weight","penalty","random_state","max_iter","addKNN","choice","number_neighbours","algorithm","weights","addKMeans","n_clusters","init","n_init","addRandomForest","n_estimators","criterion","min_sample_split","max_features","addDecisionTree","splitter","min_samples_split","addSvm","c","kernel","degree","gamma","addNaiveBayes","estimator","changeDecisionSplitter","map","layer","changeDecisionMinSamplesSplit","changeDecisionRandomState","changeSvmC","C","changeSvmKernel","changeSvmDegree","changeSvmGamma","changeSvmRandomState","changeNaiveBayesEstimator","changeLogisticPenalty","changeLogisticClassWeight","changeLogisticRandomState","changeLogisticMaxIter","changeKNNChoice","changeKNNNumber","changeKNNAlgorithm","changeKNNWeights","changeKMeansClusterNo","changeKMeansInit","changeKMeansInitNo","changeKMeansRandom","changeKMeansMaxIter","changeRandomChoice","changeRandomEstimators","changeRandomCriterion","changeRandomMinSample","changeRandomMaxFeatures","changeInputFileName","file_name","changeInputInbuilt","changeInputTestSize","changeInputRandomState","inputrandomstate","inputValueChange","valuec","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","setKey","_c","$RefreshReg$"],"sources":["C:/Users/Merene Benson/Downloads/nocode/NoCodeML/src/components/new_comp.js"],"sourcesContent":["import React from 'react'\r\nimport { useState } from 'react'\r\nimport Linear_regression from './Linear_regression.js'\r\nimport Logistic_resgression from './Logistic_resgression.jsx'\r\nimport KNN from './KNN.jsx'\r\nimport KMeans from './KMeans.jsx'\r\nimport RandomForest from './RandomForest.jsx'\r\nimport Decision_tree from './Decision_tree.jsx'\r\nimport Svm from './Svm.jsx'\r\nimport Naive_bayes from './Naive_bayes.jsx'\r\nimport './style.css' \r\nimport Input from './Input.jsx'\r\n\r\n\r\nconst NewComp = () => {\r\n  const [layers,setLayers]=useState([ {key:crypto.randomUUID(),type:'input',filename:'',inbuilt:'',testsize:'',randomstate:''} ]) ///////\r\n  console.log(layers)\r\n  function addLinearRegression()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'linear_regression'}]})\r\n  }\r\n  function addLogisticRegression()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'logistic_regression',class_weight:'Balanced',penalty:'l2',random_state:'none',max_iter:'default'}]})\r\n  }\r\n  function addKNN()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'knn',choice:'Classifier',number_neighbours:'5',algorithm:'auto',weights:'uniform'}]})\r\n  }\r\n  function addKMeans()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'kmeans',n_clusters:'8',init:'k-means++',n_init:'10',max_iter:'300',random_state:'0'}]})\r\n  }\r\n  function addRandomForest()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'randomforest',choice:'Classifier',n_estimators:'100',criterion:'gini',min_sample_split:'2',max_features:'10'}]})\r\n  }\r\n  function addDecisionTree()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'decision_tree',splitter:'best',min_samples_split:'2',random_state:''}]})\r\n  }\r\n  function addSvm()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'svm',c:'1.0',kernel:'rbf',degree:'3',gamma:'scale',random_state:''}]})\r\n  }\r\n  function addNaiveBayes()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'naive_bayes',estimator:''}]})\r\n  }\r\n  function changeDecisionSplitter(key,splitter)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,splitter}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeDecisionMinSamplesSplit(key,min_samples_split)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,min_samples_split}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeDecisionRandomState(key,random_state)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,random_state}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeSvmC(key,C)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,C}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  } \r\n  function changeSvmKernel(key,kernel)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,kernel}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeSvmDegree(key,degree)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,degree}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeSvmGamma(key,gamma)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,gamma}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeSvmRandomState(key,random_state)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,random_state}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeNaiveBayesEstimator(key,estimator)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,estimator}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  \r\n \r\n  function changeLogisticPenalty(key,penalty)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n        console.log(key+'   '+layer.key)\r\n          console.log(penalty)\r\n          return {...layer,penalty}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeLogisticClassWeight(key,class_weight)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,class_weight}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeLogisticRandomState(key,random_state)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,random_state}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeLogisticMaxIter(key,max_iter)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,max_iter}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKNNChoice(key,choice)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,choice}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKNNNumber(key,number_neighbours)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,number_neighbours}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  \r\n  function changeKNNAlgorithm(key,algorithm)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,algorithm}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKNNWeights(key,weights)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,weights}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKMeansClusterNo(key,n_clusters)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,n_clusters}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKMeansInit(key,init)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,init}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKMeansInitNo(key,n_init)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,n_init}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKMeansRandom(key,random_state)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,random_state}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKMeansMaxIter(key,max_iter)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,max_iter}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n\r\n  function changeRandomChoice(key,choice)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,choice}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeRandomEstimators(key,n_estimators)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,n_estimators}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeRandomCriterion(key,criterion)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,criterion}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeRandomMinSample(key,min_sample_split)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,min_sample_split}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeRandomMaxFeatures(key,max_features)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,max_features}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  \r\n  function changeInputFileName(key,file_name)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,file_name}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeInputInbuilt(key,inbuilt)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,inbuilt}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeInputTestSize(key,testsize)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,testsize}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeInputRandomState(key,inputrandomstate)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,inputrandomstate}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function inputValueChange(key,valuec)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,valuec}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='m-12 flex flex-row-reverse gap-2'>\r\n      <div className='w-96 py-2 border-dashed border-2 gap-1 text-4xl rounded-lg background-color1'>\r\n        <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addLinearRegression()}>LinearRegression</button>\r\n        <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addLogisticRegression()}>LogisticRegression</button>\r\n        <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addKNN()}>KNN</button>\r\n        <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addKMeans()}>K-means</button>\r\n        <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addRandomForest()}>Random Forest</button>\r\n        <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addDecisionTree()}>Decision Tree</button>\r\n        <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addSvm()}>SVM</button>\r\n        <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addNaiveBayes()}>Naive Bayes</button>\r\n      </div>\r\n        <ul className='flex flex-row text-4xl gap-2 p-1'>\r\n          {\r\n            layers.map(layer=>\r\n            {\r\n              if(layer.type==='linear_regression')\r\n            {\r\n              return <Linear_regression setKey={layer.key} />\r\n            }\r\n            if(layer.type==='logistic_regression')\r\n            {\r\n              return <Logistic_resgression setKey={layer.key} changeLogisticPenalty={changeLogisticPenalty} changeLogisticClassWeight={changeLogisticClassWeight} changeLogisticRandomState={changeLogisticRandomState} changeLogisticMaxIter={changeLogisticMaxIter}/>\r\n            }\r\n            if(layer.type==='knn')\r\n            {\r\n              return <KNN setKey={layer.key} changeKNNChoice={changeKNNChoice} changeKNNAlgorithm={changeKNNAlgorithm} changeKNNNumber={changeKNNNumber} changeKNNWeights={changeKNNWeights} />\r\n            }\r\n            if(layer.type==='kmeans')\r\n            {\r\n              return <KMeans setKey={layer.key} changeKMeansClusterNo={changeKMeansClusterNo} changeKMeansInit={changeKMeansInit} changeKMeansInitNo={changeKMeansInitNo} changeKMeansMaxIter={changeKMeansMaxIter} changeKMeansRandom={changeKMeansRandom} />\r\n            }\r\n            if(layer.type==='randomforest')\r\n            {\r\n              return <RandomForest setKey={layer.key} changeRandomChoice={changeRandomChoice} changeRandomCriterion={changeRandomCriterion} changeRandomEstimators={changeRandomEstimators} changeRandomMaxFeatures={changeRandomMaxFeatures} changeRandomMinSample={changeRandomMinSample} />\r\n            }\r\n            if(layer.type==='decision_tree')\r\n            {\r\n              return <Decision_tree setKey={layer.key} changeDecisionSplitter={changeDecisionSplitter} changeDecisionMinSamplesSplit={changeDecisionMinSamplesSplit} changeDecisionRandomState={changeDecisionRandomState}/>\r\n            }\r\n            if(layer.type==='svm')\r\n            {\r\n              return <Svm setKey={layer.key} changeSvmC={changeSvmC} changeSvmKernel={changeSvmKernel} changeSvmDegree={changeSvmDegree} changeSvmGamma={changeSvmGamma} changeSvmRandomState={changeSvmRandomState}/>\r\n            }\r\n            if(layer.type==='naive_bayes')\r\n            {\r\n              return <Naive_bayes setKey={layer.key} changeNaiveBayesEstimator={changeNaiveBayesEstimator} />\r\n            }\r\n            if(layer.type==='input')\r\n            {\r\n              return <Input setKey={layer.key} changeInputFileName={changeInputFileName} changeInputInbuilt={changeInputInbuilt} changeInputTestSize={changeInputTestSize} changeInputRandomState={changeInputRandomState} inputValueChange={inputValueChange} />\r\n            }\r\n          })}\r\n        </ul>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default NewComp"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}