{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Merene Benson\\\\Downloads\\\\nocode\\\\NoCodeML\\\\src\\\\components\\\\CodeGeneration.jsx\";\nimport React from 'react';\nimport linearRegression from './codeGeneration/CGLinearRegression';\nimport SVM from './codeGeneration/CGSVM';\n//give import statements of all functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction createCode(data) {\n  var imports;\n  var code;\n  data.map(layer => {\n    /*if(layer.type==='input')\r\n    {\r\n      input(layer)\r\n    }\r\n    else if(layer.type==='preprocess')\r\n    {\r\n      preprocess(layer)\r\n    }\r\n    else*/\n    if (layer.type === 'linear_regression') {\n      var temp = linearRegression(layer);\n      imports = temp.import;\n      code = temp.code;\n    }\n    /*else if(layer.type==='logistic_regression')\r\n    {\r\n      logisticRegression(layer)\r\n    }\r\n    else if(layer.type==='knn')\r\n    {\r\n      knn(layer)\r\n    }\r\n    else if(layer.type==='kmeans')\r\n    {\r\n      kMeans(layer)\r\n    }\r\n    else if(layer.type==='randomforest')\r\n    {\r\n      randomForest(layer)\r\n    }\r\n    else if(layer.type==='decision_tree')\r\n    {\r\n      decisionTree(layer)\r\n    }\r\n    else*/\n    if (layer.type === 'svm') {\n      var temp = SVM(layer);\n      imports = temp.import;\n      code = temp.code;\n      console.log(imports);\n      console.log(code);\n    } /*\r\n      else if(layer.type==='naive_bayes')\r\n      {\r\n       naiveBayes(layer)\r\n      }\r\n      else if(layer.type==='output')\r\n       {\r\n         output(layer)\r\n       }*/\n  });\n}\n\nconst CodeGeneration = _ref => {\n  let {\n    data\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"w-80  m-1 background-color-blue rounded-lg\",\n      onClick: () => createCode(data),\n      children: \"Generate Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_c = CodeGeneration;\nexport default CodeGeneration;\nvar _c;\n$RefreshReg$(_c, \"CodeGeneration\");","map":{"version":3,"names":["React","linearRegression","SVM","jsxDEV","_jsxDEV","createCode","data","imports","code","map","layer","type","temp","import","console","log","CodeGeneration","_ref","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Merene Benson/Downloads/nocode/NoCodeML/src/components/CodeGeneration.jsx"],"sourcesContent":["import React from 'react'\r\nimport linearRegression from './codeGeneration/CGLinearRegression'\r\nimport SVM from './codeGeneration/CGSVM'\r\n//give import statements of all functions\r\n\r\nfunction createCode(data){\r\n  var imports\r\n  var code\r\n  data.map(layer=>\r\n    { \r\n        /*if(layer.type==='input')\r\n        {\r\n          input(layer)\r\n        }\r\n        else if(layer.type==='preprocess')\r\n        {\r\n          preprocess(layer)\r\n        }\r\n        else*/ if(layer.type==='linear_regression')\r\n        {  \r\n          var temp=linearRegression(layer)\r\n          imports=temp.import\r\n          code=temp.code\r\n        }\r\n        /*else if(layer.type==='logistic_regression')\r\n        {\r\n          logisticRegression(layer)\r\n        }\r\n        else if(layer.type==='knn')\r\n        {\r\n          knn(layer)\r\n        }\r\n        else if(layer.type==='kmeans')\r\n        {\r\n          kMeans(layer)\r\n        }\r\n        else if(layer.type==='randomforest')\r\n        {\r\n          randomForest(layer)\r\n        }\r\n        else if(layer.type==='decision_tree')\r\n        {\r\n          decisionTree(layer)\r\n        }\r\n        else*/ if(layer.type==='svm')\r\n        {\r\n          var temp=SVM(layer)\r\n          imports=temp.import\r\n          code=temp.code\r\n          console.log(imports)\r\n          console.log(code)\r\n        }/*\r\n        else if(layer.type==='naive_bayes')\r\n        {\r\n          naiveBayes(layer)\r\n        }\r\n        else if(layer.type==='output')\r\n          {\r\n            output(layer)\r\n          }*/\r\n    })\r\n  \r\n}\r\nconst CodeGeneration = ({data}) => {\r\n  return (\r\n    <div>\r\n        <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>createCode(data)}>Generate Code</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CodeGeneration"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,gBAAgB,MAAM,qCAAqC;AAClE,OAAOC,GAAG,MAAM,wBAAwB;AACxC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,UAAUA,CAACC,IAAI,EAAC;EACvB,IAAIC,OAAO;EACX,IAAIC,IAAI;EACRF,IAAI,CAACG,GAAG,CAACC,KAAK,IACZ;IACI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAAe,IAAGA,KAAK,CAACC,IAAI,KAAG,mBAAmB,EAC1C;MACE,IAAIC,IAAI,GAACX,gBAAgB,CAACS,KAAK,CAAC;MAChCH,OAAO,GAACK,IAAI,CAACC,MAAM;MACnBL,IAAI,GAACI,IAAI,CAACJ,IAAI;IAChB;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAAe,IAAGE,KAAK,CAACC,IAAI,KAAG,KAAK,EAC5B;MACE,IAAIC,IAAI,GAACV,GAAG,CAACQ,KAAK,CAAC;MACnBH,OAAO,GAACK,IAAI,CAACC,MAAM;MACnBL,IAAI,GAACI,IAAI,CAACJ,IAAI;MACdM,OAAO,CAACC,GAAG,CAACR,OAAO,CAAC;MACpBO,OAAO,CAACC,GAAG,CAACP,IAAI,CAAC;IACnB,CAAC;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,CAAC;AAEN;;AACA,MAAMQ,cAAc,GAAGC,IAAA,IAAY;EAAA,IAAX;IAACX;EAAI,CAAC,GAAAW,IAAA;EAC5B,oBACEb,OAAA;IAAAc,QAAA,eACId,OAAA;MAAQe,SAAS,EAAC,4CAA4C;MAACC,OAAO,EAAEA,CAAA,KAAIf,UAAU,CAACC,IAAI,CAAE;MAAAY,QAAA,EAAC;IAAa;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnH,CAAC;AAEV,CAAC;AAAAC,EAAA,GANKT,cAAc;AAQpB,eAAeA,cAAc;AAAA,IAAAS,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}