{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Merene Benson\\\\Downloads\\\\nocode\\\\NoCodeML\\\\src\\\\components\\\\new_comp.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport Linear_regression from './Linear_regression.jsx';\nimport Logistic_resgression from './Logistic_resgression.jsx';\nimport KNN from './KNN.jsx';\nimport KMeans from './KMeans.jsx';\nimport RandomForest from './RandomForest.jsx';\nimport Decision_tree from './Decision_tree.jsx';\nimport Svm from './Svm.jsx';\nimport Naive_bayes from './Naive_bayes.jsx';\nimport Preprocess from './preprocess.jsx';\nimport Input from './Input.jsx';\nimport CodeGeneration from './CodeGeneration.jsx';\nimport Output from './Output.jsx';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewComp = () => {\n  _s();\n  const [layers, setLayers] = useState([{\n    key: crypto.randomUUID(),\n    type: 'input',\n    filename: '',\n    inbuilt: '',\n    testsize: '',\n    randomstate: ''\n  }, {\n    key: crypto.randomUUID(),\n    type: 'preprocess',\n    scaler: 'StandardScaler'\n  }]);\n  const [output, setOutput] = useState(true);\n  console.log(layers);\n  function addOutput() {\n    setLayers(currentLayers => {\n      return [...currentLayers, {\n        key: crypto.randomUUID(),\n        type: 'output',\n        fileName: 'output.pkl'\n      }];\n    });\n  }\n  function addLinearRegression() {\n    setLayers(currentLayers => {\n      return [...currentLayers, {\n        key: crypto.randomUUID(),\n        type: 'linear_regression'\n      }];\n    });\n    setOutput(false);\n    addOutput();\n  }\n  function addLogisticRegression() {\n    setLayers(currentLayers => {\n      return [...currentLayers, {\n        key: crypto.randomUUID(),\n        type: 'logistic_regression',\n        class_weight: 'Balanced',\n        penalty: 'l2',\n        random_state: 'none',\n        max_iter: 'default'\n      }];\n    });\n    setOutput(false);\n    addOutput();\n  }\n  function addKNN() {\n    setLayers(currentLayers => {\n      return [...currentLayers, {\n        key: crypto.randomUUID(),\n        type: 'knn',\n        choice: 'Classifier',\n        number_neighbours: '5',\n        algorithm: 'auto',\n        weights: 'uniform'\n      }];\n    });\n    setOutput(false);\n    addOutput();\n  }\n  function addKMeans() {\n    setLayers(currentLayers => {\n      return [...currentLayers, {\n        key: crypto.randomUUID(),\n        type: 'kmeans',\n        n_clusters: '8',\n        init: 'k-means++',\n        n_init: '10',\n        max_iter: '300',\n        random_state: '0'\n      }];\n    });\n    setOutput(false);\n    addOutput();\n  }\n  function addRandomForest() {\n    setLayers(currentLayers => {\n      return [...currentLayers, {\n        key: crypto.randomUUID(),\n        type: 'randomforest',\n        choice: 'Classifier',\n        n_estimators: '100',\n        criterion: 'gini',\n        min_sample_split: '2',\n        max_features: '10'\n      }];\n    });\n    setOutput(false);\n    addOutput();\n  }\n  function addDecisionTree() {\n    setLayers(currentLayers => {\n      return [...currentLayers, {\n        key: crypto.randomUUID(),\n        type: 'decision_tree',\n        splitter: 'best',\n        min_samples_split: '2',\n        random_state: ''\n      }];\n    });\n    setOutput(false);\n    addOutput();\n  }\n  function addSvm() {\n    setLayers(currentLayers => {\n      return [...currentLayers, {\n        key: crypto.randomUUID(),\n        type: 'svm',\n        c: '1.0',\n        kernel: 'rbf',\n        degree: '3',\n        gamma: 'scale',\n        random_state: ''\n      }];\n    });\n    setOutput(false);\n    addOutput();\n  }\n  function addNaiveBayes() {\n    setLayers(currentLayers => {\n      return [...currentLayers, {\n        key: crypto.randomUUID(),\n        type: 'naive_bayes',\n        estimator: ''\n      }];\n    });\n    setOutput(false);\n    addOutput();\n  }\n  function changeDecisionSplitter(key, splitter) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            splitter\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeDecisionMinSamplesSplit(key, min_samples_split) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            min_samples_split\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeDecisionRandomState(key, random_state) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            random_state\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeSvmC(key, C) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            C\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeSvmKernel(key, kernel) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            kernel\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeSvmDegree(key, degree) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            degree\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeSvmGamma(key, gamma) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            gamma\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeSvmRandomState(key, random_state) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            random_state\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeNaiveBayesEstimator(key, estimator) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            estimator\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeLogisticPenalty(key, penalty) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          console.log(key + '   ' + layer.key);\n          console.log(penalty);\n          return {\n            ...layer,\n            penalty\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeLogisticClassWeight(key, class_weight) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            class_weight\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeLogisticRandomState(key, random_state) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            random_state\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeLogisticMaxIter(key, max_iter) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            max_iter\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeKNNChoice(key, choice) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            choice\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeKNNNumber(key, number_neighbours) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            number_neighbours\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeKNNAlgorithm(key, algorithm) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            algorithm\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeKNNWeights(key, weights) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            weights\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeKMeansClusterNo(key, n_clusters) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            n_clusters\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeKMeansInit(key, init) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            init\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeKMeansInitNo(key, n_init) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            n_init\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeKMeansRandom(key, random_state) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            random_state\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeKMeansMaxIter(key, max_iter) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            max_iter\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeRandomChoice(key, choice) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            choice\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeRandomEstimators(key, n_estimators) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            n_estimators\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeRandomCriterion(key, criterion) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            criterion\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeRandomMinSample(key, min_sample_split) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            min_sample_split\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeRandomMaxFeatures(key, max_features) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            max_features\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeOutputFileName(key, fileName) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            fileName\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changePreprocess(key, scaler) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            scaler\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeInputFileName(key, file_name) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            file_name\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeInputInbuilt(key, inbuilt) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            inbuilt\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeInputTestSize(key, testsize) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            testsize\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  function changeInputRandomState(key, inputrandomstate) {\n    setLayers(currentLayers => {\n      return currentLayers.map(layer => {\n        if (layer.key === key) {\n          return {\n            ...layer,\n            inputrandomstate\n          };\n        }\n        return layer;\n      });\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"m-12 flex flex-row-reverse place-content-start gap-2\",\n      children: [output ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-96 py-2 border-dashed border-2 gap-1 text-4xl rounded-lg background-color1\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"w-80  m-1 background-color-blue rounded-lg\",\n          onClick: () => addLinearRegression(),\n          children: \"Linear Regression\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"w-80  m-1 background-color-blue rounded-lg\",\n          onClick: () => addLogisticRegression(),\n          children: \"Logistic Regression\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"w-80  m-1 background-color-blue rounded-lg\",\n          onClick: () => addKNN(),\n          children: \"KNN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"w-80  m-1 background-color-blue rounded-lg\",\n          onClick: () => addKMeans(),\n          children: \"K-means\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"w-80  m-1 background-color-blue rounded-lg\",\n          onClick: () => addRandomForest(),\n          children: \"Random Forest\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"w-80  m-1 background-color-blue rounded-lg\",\n          onClick: () => addDecisionTree(),\n          children: \"Decision Tree\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"w-80  m-1 background-color-blue rounded-lg\",\n          onClick: () => addSvm(),\n          children: \"SVM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"w-80  m-1 background-color-blue rounded-lg\",\n          onClick: () => addNaiveBayes(),\n          children: \"Naive Bayes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 14\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"flex flex-row text-4xl gap-2 p-1\",\n        children: layers.map(layer => {\n          if (layer.type === 'input') {\n            return /*#__PURE__*/_jsxDEV(Input, {\n              setKey: layer.key,\n              changeInputFileName: changeInputFileName,\n              changeInputInbuilt: changeInputInbuilt,\n              changeInputTestSize: changeInputTestSize,\n              changeInputRandomState: changeInputRandomState\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 24\n            }, this);\n          }\n          if (layer.type === 'preprocess') {\n            return /*#__PURE__*/_jsxDEV(Preprocess, {\n              setKey: layer.key,\n              changePreprocess: changePreprocess\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 26\n            }, this);\n          }\n          if (layer.type === 'linear_regression') {\n            return /*#__PURE__*/_jsxDEV(Linear_regression, {\n              setKey: layer.key\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 24\n            }, this);\n          }\n          if (layer.type === 'logistic_regression') {\n            return /*#__PURE__*/_jsxDEV(Logistic_resgression, {\n              setKey: layer.key,\n              changeLogisticPenalty: changeLogisticPenalty,\n              changeLogisticClassWeight: changeLogisticClassWeight,\n              changeLogisticRandomState: changeLogisticRandomState,\n              changeLogisticMaxIter: changeLogisticMaxIter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 24\n            }, this);\n          }\n          if (layer.type === 'knn') {\n            return /*#__PURE__*/_jsxDEV(KNN, {\n              setKey: layer.key,\n              changeKNNChoice: changeKNNChoice,\n              changeKNNAlgorithm: changeKNNAlgorithm,\n              changeKNNNumber: changeKNNNumber,\n              changeKNNWeights: changeKNNWeights\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 24\n            }, this);\n          }\n          if (layer.type === 'kmeans') {\n            return /*#__PURE__*/_jsxDEV(KMeans, {\n              setKey: layer.key,\n              changeKMeansClusterNo: changeKMeansClusterNo,\n              changeKMeansInit: changeKMeansInit,\n              changeKMeansInitNo: changeKMeansInitNo,\n              changeKMeansMaxIter: changeKMeansMaxIter,\n              changeKMeansRandom: changeKMeansRandom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 511,\n              columnNumber: 24\n            }, this);\n          }\n          if (layer.type === 'randomforest') {\n            return /*#__PURE__*/_jsxDEV(RandomForest, {\n              setKey: layer.key,\n              changeRandomChoice: changeRandomChoice,\n              changeRandomCriterion: changeRandomCriterion,\n              changeRandomEstimators: changeRandomEstimators,\n              changeRandomMaxFeatures: changeRandomMaxFeatures,\n              changeRandomMinSample: changeRandomMinSample\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 24\n            }, this);\n          }\n          if (layer.type === 'decision_tree') {\n            return /*#__PURE__*/_jsxDEV(Decision_tree, {\n              setKey: layer.key,\n              changeDecisionSplitter: changeDecisionSplitter,\n              changeDecisionMinSamplesSplit: changeDecisionMinSamplesSplit,\n              changeDecisionRandomState: changeDecisionRandomState\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 24\n            }, this);\n          }\n          if (layer.type === 'svm') {\n            return /*#__PURE__*/_jsxDEV(Svm, {\n              setKey: layer.key,\n              changeSvmC: changeSvmC,\n              changeSvmKernel: changeSvmKernel,\n              changeSvmDegree: changeSvmDegree,\n              changeSvmGamma: changeSvmGamma,\n              changeSvmRandomState: changeSvmRandomState\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 24\n            }, this);\n          }\n          if (layer.type === 'naive_bayes') {\n            return /*#__PURE__*/_jsxDEV(Naive_bayes, {\n              setKey: layer.key,\n              changeNaiveBayesEstimator: changeNaiveBayesEstimator\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 24\n            }, this);\n          }\n          if (layer.type === 'output') {\n            return /*#__PURE__*/_jsxDEV(Output, {\n              setKey: layer.key,\n              changeOutputFileName: changeOutputFileName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 26\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CodeGeneration, {\n      data: layers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 469,\n    columnNumber: 5\n  }, this);\n};\n_s(NewComp, \"JXV5sastqxOcLpnMag6udLrNMCU=\");\n_c = NewComp;\nexport default NewComp;\nvar _c;\n$RefreshReg$(_c, \"NewComp\");","map":{"version":3,"names":["React","useState","useEffect","Linear_regression","Logistic_resgression","KNN","KMeans","RandomForest","Decision_tree","Svm","Naive_bayes","Preprocess","Input","CodeGeneration","Output","jsxDEV","_jsxDEV","NewComp","_s","layers","setLayers","key","crypto","randomUUID","type","filename","inbuilt","testsize","randomstate","scaler","output","setOutput","console","log","addOutput","currentLayers","fileName","addLinearRegression","addLogisticRegression","class_weight","penalty","random_state","max_iter","addKNN","choice","number_neighbours","algorithm","weights","addKMeans","n_clusters","init","n_init","addRandomForest","n_estimators","criterion","min_sample_split","max_features","addDecisionTree","splitter","min_samples_split","addSvm","c","kernel","degree","gamma","addNaiveBayes","estimator","changeDecisionSplitter","map","layer","changeDecisionMinSamplesSplit","changeDecisionRandomState","changeSvmC","C","changeSvmKernel","changeSvmDegree","changeSvmGamma","changeSvmRandomState","changeNaiveBayesEstimator","changeLogisticPenalty","changeLogisticClassWeight","changeLogisticRandomState","changeLogisticMaxIter","changeKNNChoice","changeKNNNumber","changeKNNAlgorithm","changeKNNWeights","changeKMeansClusterNo","changeKMeansInit","changeKMeansInitNo","changeKMeansRandom","changeKMeansMaxIter","changeRandomChoice","changeRandomEstimators","changeRandomCriterion","changeRandomMinSample","changeRandomMaxFeatures","changeOutputFileName","changePreprocess","changeInputFileName","file_name","changeInputInbuilt","changeInputTestSize","changeInputRandomState","inputrandomstate","className","children","onClick","_jsxFileName","lineNumber","columnNumber","setKey","data","_c","$RefreshReg$"],"sources":["C:/Users/Merene Benson/Downloads/nocode/NoCodeML/src/components/new_comp.jsx"],"sourcesContent":["import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport Linear_regression from './Linear_regression.jsx'\r\nimport Logistic_resgression from './Logistic_resgression.jsx'\r\nimport KNN from './KNN.jsx'\r\nimport KMeans from './KMeans.jsx'\r\nimport RandomForest from './RandomForest.jsx'\r\nimport Decision_tree from './Decision_tree.jsx'\r\nimport Svm from './Svm.jsx'\r\nimport Naive_bayes from './Naive_bayes.jsx'\r\nimport Preprocess from './preprocess.jsx'\r\nimport Input from './Input.jsx'\r\nimport CodeGeneration from './CodeGeneration.jsx'\r\nimport Output from './Output.jsx'\r\nimport './style.css' \r\n\r\nconst NewComp = () => {\r\n  const [layers,setLayers]=useState([{key:crypto.randomUUID(),type:'input',filename:'',inbuilt:'',testsize:'',randomstate:''},{key:crypto.randomUUID(),type:'preprocess',scaler:'StandardScaler'}])\r\n  const [output,setOutput]=useState(true)\r\n  console.log(layers)  \r\n  \r\n  function addOutput()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'output',fileName:'output.pkl'}]})\r\n  }\r\n  function addLinearRegression()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'linear_regression'}]})\r\n    setOutput(false)\r\n    addOutput()\r\n  }\r\n  function addLogisticRegression()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'logistic_regression',class_weight:'Balanced',penalty:'l2',random_state:'none',max_iter:'default'}]})\r\n    setOutput(false)\r\n    addOutput()\r\n  }\r\n  function addKNN()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'knn',choice:'Classifier',number_neighbours:'5',algorithm:'auto',weights:'uniform'}]})\r\n    setOutput(false)\r\n    addOutput()\r\n  }\r\n  function addKMeans()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'kmeans',n_clusters:'8',init:'k-means++',n_init:'10',max_iter:'300',random_state:'0'}]})\r\n    setOutput(false)\r\n    addOutput()\r\n  }\r\n  function addRandomForest()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'randomforest',choice:'Classifier',n_estimators:'100',criterion:'gini',min_sample_split:'2',max_features:'10'}]})\r\n    setOutput(false)\r\n    addOutput()\r\n  }\r\n  function addDecisionTree()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'decision_tree',splitter:'best',min_samples_split:'2',random_state:''}]})\r\n    setOutput(false)\r\n    addOutput()\r\n  }\r\n  function addSvm()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'svm',c:'1.0',kernel:'rbf',degree:'3',gamma:'scale',random_state:''}]})\r\n    setOutput(false)\r\n    addOutput()\r\n  }\r\n  function addNaiveBayes()\r\n  {\r\n    setLayers((currentLayers)=>{return[...currentLayers,{key:crypto.randomUUID(),type:'naive_bayes',estimator:''}]})\r\n    setOutput(false)\r\n    addOutput()\r\n  }\r\n  function changeDecisionSplitter(key,splitter)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,splitter}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeDecisionMinSamplesSplit(key,min_samples_split)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,min_samples_split}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeDecisionRandomState(key,random_state)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,random_state}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeSvmC(key,C)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,C}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  } \r\n  function changeSvmKernel(key,kernel)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,kernel}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeSvmDegree(key,degree)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,degree}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeSvmGamma(key,gamma)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,gamma}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeSvmRandomState(key,random_state)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,random_state}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeNaiveBayesEstimator(key,estimator)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,estimator}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  \r\n \r\n  function changeLogisticPenalty(key,penalty)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n        console.log(key+'   '+layer.key)\r\n          console.log(penalty)\r\n          return {...layer,penalty}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeLogisticClassWeight(key,class_weight)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,class_weight}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeLogisticRandomState(key,random_state)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,random_state}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeLogisticMaxIter(key,max_iter)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,max_iter}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKNNChoice(key,choice)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,choice}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKNNNumber(key,number_neighbours)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,number_neighbours}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  \r\n  function changeKNNAlgorithm(key,algorithm)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,algorithm}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKNNWeights(key,weights)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,weights}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKMeansClusterNo(key,n_clusters)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,n_clusters}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKMeansInit(key,init)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,init}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKMeansInitNo(key,n_init)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,n_init}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKMeansRandom(key,random_state)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,random_state}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeKMeansMaxIter(key,max_iter)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,max_iter}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n\r\n  function changeRandomChoice(key,choice)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,choice}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeRandomEstimators(key,n_estimators)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,n_estimators}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeRandomCriterion(key,criterion)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,criterion}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeRandomMinSample(key,min_sample_split)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,min_sample_split}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeRandomMaxFeatures(key,max_features)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,max_features}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeOutputFileName(key,fileName)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,fileName}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changePreprocess(key,scaler)\r\n  {\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,scaler}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeInputFileName(key,file_name)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,file_name}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeInputInbuilt(key,inbuilt)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,inbuilt}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeInputTestSize(key,testsize)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,testsize}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  function changeInputRandomState(key,inputrandomstate)\r\n  {\r\n\r\n    setLayers(currentLayers => {\r\n      return currentLayers.map(layer=>{\r\n      if(layer.key===key){\r\n          return {...layer,inputrandomstate}\r\n        }\r\n      return layer\r\n    })\r\n    })\r\n  }\r\n  \r\n  return (\r\n    <div className='flex flex-col'>\r\n      <div className='m-12 flex flex-row-reverse place-content-start gap-2'>\r\n        {\r\n          output?\r\n            (<div className='w-96 py-2 border-dashed border-2 gap-1 text-4xl rounded-lg background-color1'>\r\n              <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addLinearRegression()}>Linear Regression</button>\r\n              <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addLogisticRegression()}>Logistic Regression</button>\r\n              <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addKNN()}>KNN</button>\r\n              <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addKMeans()}>K-means</button>\r\n              <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addRandomForest()}>Random Forest</button>\r\n              <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addDecisionTree()}>Decision Tree</button>\r\n              <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addSvm()}>SVM</button>\r\n              <button className='w-80  m-1 background-color-blue rounded-lg' onClick={()=>addNaiveBayes()}>Naive Bayes</button>\r\n            </div>):(<div></div>)\r\n            \r\n          }\r\n          <ul className='flex flex-row text-4xl gap-2 p-1'>\r\n            {\r\n              layers.map(layer=>\r\n              {\r\n                if(layer.type==='input')\r\n              {\r\n                return <Input setKey={layer.key} changeInputFileName={changeInputFileName} changeInputInbuilt={changeInputInbuilt} changeInputTestSize={changeInputTestSize} changeInputRandomState={changeInputRandomState}/>\r\n              }\r\n                if(layer.type==='preprocess')\r\n                {\r\n                  return <Preprocess setKey={layer.key} changePreprocess={changePreprocess}/>\r\n                }\r\n                if(layer.type==='linear_regression')\r\n              {\r\n                return <Linear_regression setKey={layer.key} />\r\n              }\r\n              if(layer.type==='logistic_regression')\r\n              {\r\n                return <Logistic_resgression setKey={layer.key} changeLogisticPenalty={changeLogisticPenalty} changeLogisticClassWeight={changeLogisticClassWeight} changeLogisticRandomState={changeLogisticRandomState} changeLogisticMaxIter={changeLogisticMaxIter}/>\r\n              }\r\n              if(layer.type==='knn')\r\n              {\r\n                return <KNN setKey={layer.key} changeKNNChoice={changeKNNChoice} changeKNNAlgorithm={changeKNNAlgorithm} changeKNNNumber={changeKNNNumber} changeKNNWeights={changeKNNWeights} />\r\n              }\r\n              if(layer.type==='kmeans')\r\n              {\r\n                return <KMeans setKey={layer.key} changeKMeansClusterNo={changeKMeansClusterNo} changeKMeansInit={changeKMeansInit} changeKMeansInitNo={changeKMeansInitNo} changeKMeansMaxIter={changeKMeansMaxIter} changeKMeansRandom={changeKMeansRandom} />\r\n              }\r\n              if(layer.type==='randomforest')\r\n              {\r\n                return <RandomForest setKey={layer.key} changeRandomChoice={changeRandomChoice} changeRandomCriterion={changeRandomCriterion} changeRandomEstimators={changeRandomEstimators} changeRandomMaxFeatures={changeRandomMaxFeatures} changeRandomMinSample={changeRandomMinSample} />\r\n              }\r\n              if(layer.type==='decision_tree')\r\n              {\r\n                return <Decision_tree setKey={layer.key} changeDecisionSplitter={changeDecisionSplitter} changeDecisionMinSamplesSplit={changeDecisionMinSamplesSplit} changeDecisionRandomState={changeDecisionRandomState}/>\r\n              }\r\n              if(layer.type==='svm')\r\n              {\r\n                return <Svm setKey={layer.key} changeSvmC={changeSvmC} changeSvmKernel={changeSvmKernel} changeSvmDegree={changeSvmDegree} changeSvmGamma={changeSvmGamma} changeSvmRandomState={changeSvmRandomState}/>\r\n              }\r\n              if(layer.type==='naive_bayes')\r\n              {\r\n                return <Naive_bayes setKey={layer.key} changeNaiveBayesEstimator={changeNaiveBayesEstimator} />\r\n              }\r\n              if(layer.type==='output')\r\n                {\r\n\r\n                  return <Output setKey={layer.key} changeOutputFileName={changeOutputFileName}/>\r\n                }\r\n            })}\r\n          </ul>\r\n      </div>\r\n      \r\n      <CodeGeneration data={layers}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NewComp"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}